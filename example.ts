/**
 * Ejemplo básico de uso de la librería Deno Oracle
 *
 * Para probar este ejemplo:
 * 1. Ajusta la configuración de conexión según tu entorno
 * 2. Ejecuta: deno run --allow-net --allow-read --allow-env example.ts
 */

import { closePool, GenericController, initializePool, MemoryCache, querySQL, SqlBuilder } from "./mod.ts";

// Configuración de conexión (ajustar según tu entorno)
const dbConfig = {
  user: "tu_usuario",
  password: "tu_password",
  connectString: "localhost:1521/XE",
  poolMin: 2,
  poolMax: 5,
};

// Configuración de entidad de ejemplo
const userEntityConfig = {
  tableName: "usuarios",
  primaryKey: "id",
  displayName: "Usuarios",
  description: "Gestión de usuarios del sistema",
  fields: {
    id: { type: "number", required: true },
    nombre: { type: "string", required: true, maxLength: 100 },
    email: { type: "string", required: true, maxLength: 255 },
    activo: { type: "boolean", defaultValue: true },
    fecha_creacion: { type: "date" },
  },
  operations: {
    create: true,
    read: true,
    update: true,
    delete: true,
    search: true,
    paginate: true,
  },
};

async function ejemploBasico() {
  try {
    console.log("🚀 Iniciando ejemplo de Deno Oracle Library");

    // 1. Inicializar conexión
    console.log("📡 Inicializando pool de conexiones...");

    // Nota: En un proyecto real, importarías el módulo oracledb
    // Por ahora, creamos un mock para el ejemplo
    const mockOracledb = {
      OUT_FORMAT_OBJECT: 4001,
      getConnection: () =>
        Promise.resolve({
          execute: () => Promise.resolve({ rows: [{ mensaje: "Conexión exitosa!" }] }),
          close: () => Promise.resolve(),
        }),
    };

    await initializePool(mockOracledb, dbConfig);

    // 2. Probar consulta directa
    console.log("🔍 Ejecutando consulta directa...");
    const testResult = await querySQL("SELECT 'Conexión exitosa!' as mensaje FROM dual");
    console.log("✅ Resultado:", testResult.rows?.[0]);

    // 3. Crear cache
    console.log("💾 Configurando cache...");
    const cache = new MemoryCache({
      defaultTTL: 300,
      maxSize: 1000,
      cleanupInterval: 60000,
    });

    // 4. Crear SQL Builder
    console.log("🏗️ Creando SQL Builder...");
    const sqlBuilder = new SqlBuilder(userEntityConfig);

    // Generar consultas SQL dinámicamente
    const selectQuery = sqlBuilder.buildSelectQuery({
      filters: { activo: true },
      orderBy: "nombre",
      orderDirection: "ASC",
    });
    console.log("📝 SQL generado:", selectQuery.sql);
    console.log("🔗 Parámetros:", selectQuery.params);

    const insertQuery = sqlBuilder.buildInsertQuery({
      nombre: "Usuario Ejemplo",
      email: "ejemplo@test.com",
      activo: true,
    });
    console.log("📝 INSERT SQL:", insertQuery.sql);

    // 5. Crear controlador CRUD
    console.log("🎮 Creando controlador CRUD...");
    const userController = new GenericController(userEntityConfig, cache);

    // Si la tabla existe, hacer operaciones CRUD
    try {
      console.log("📊 Obteniendo estadísticas...");
      const stats = await userController.getStats();
      console.log("📈 Estadísticas:", stats);

      console.log("🔍 Buscando usuarios...");
      const usuarios = await userController.findAll({
        page: 1,
        pageSize: 5,
        orderBy: "id",
      });
      console.log("👥 Usuarios encontrados:", usuarios.data.length);
      console.log("📄 Paginación:", usuarios.pagination);
    } catch (_error) {
      console.log("⚠️ La tabla 'usuarios' no existe. Eso está bien para este ejemplo.");
      console.log("💡 Para usar el CRUD completo, crea primero la tabla:");
      console.log(`
CREATE TABLE usuarios (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(100) NOT NULL,
  email VARCHAR2(255) NOT NULL UNIQUE,
  activo NUMBER(1) DEFAULT 1,
  fecha_creacion DATE DEFAULT SYSDATE
);
      `);
    }

    // 6. Demostrar cache
    console.log("💾 Demostrando cache...");
    cache.set("usuario:test", { id: 1, nombre: "Test User" });
    const cachedUser = cache.get("usuario:test");
    console.log("🎯 Usuario desde cache:", cachedUser);

    // Estadísticas del cache
    const cacheStats = cache.getStats();
    console.log("📊 Estadísticas del cache:", cacheStats);

    console.log("✅ Ejemplo completado exitosamente!");
  } catch (error) {
    console.error("❌ Error en el ejemplo:", error.message);
    console.log("💡 Asegúrate de:");
    console.log("   - Tener Oracle Database ejecutándose");
    console.log("   - Configurar correctamente las credenciales");
    console.log("   - Tener acceso de red al servidor Oracle");
  } finally {
    // 7. Cerrar conexiones
    console.log("🔌 Cerrando pool de conexiones...");
    await closePool();
    console.log("👋 ¡Hasta luego!");
  }
}

// Ejecutar ejemplo si es el módulo principal
// Nota: import.meta.main no está disponible en TypeScript estricto
// En su lugar, verificamos si es ejecutado directamente

// También exportar para uso como módulo
export { ejemploBasico };
